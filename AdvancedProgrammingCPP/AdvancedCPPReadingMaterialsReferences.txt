Functions in CPP

https://www.w3schools.com/cpp/cpp_function_default.asp

https://www.w3schools.com/cpp/cpp_functions.asp

https://www.w3schools.com/cpp/cpp_function_param.asp

https://www.w3schools.com/cpp/cpp_function_default.asp

https://www.w3schools.com/cpp/cpp_function_multiple.asp

https://www.w3schools.com/cpp/cpp_function_return.asp

https://www.w3schools.com/cpp/cpp_function_reference.asp

https://www.w3schools.com/cpp/cpp_function_overloading.asp


Lab due Sep 27, 2021 11:40 +06

Write a function for determining if a year is a leap year in the Gregorian calendar.
The system is to check if it is divisible by 4 but not by 100 unless it is also divisible
by 400.

For example, 1896, 1904, and 2000 were leap years but 1900 was not.
Write a function that takes in a year as input and returns True if the year is a leap
year, return False otherwise.

Note: background on leap year https://en.wikipedia.org/wiki/Leap_year

The name of the function should be isleapyear and the function should take one parameter which is the year to test.  Here is an example call to the function

int mybirthyear = 2000 

If( isleapyear(mybirthyear)) {

    printf(“Year %i  was a leap year”,mybirthyear)

}

File Name 

isleapyearf.cpp

Function Signature

bool isleapyear(int inyear);



Lab due Sep 27, 2021 11:40 +06

Write a function for determining if a year is a leap year in the Gregorian calendar.
The system is to check if it is divisible by 4 but not by 100 unless it is also divisible
by 400.

For example, 1896, 1904, and 2000 were leap years but 1900 was not.
Write a function that takes in a year as input and returns True if the year is a leap
year, return False otherwise.

Note: background on leap year https://en.wikipedia.org/wiki/Leap_year

The name of the function should be isleapyear and the function should take one parameter which is the year to test.  Here is an example call to the function

int mybirthyear = 2000 

If( isleapyear(mybirthyear)) {

    printf(“Year %i  was a leap year”,mybirthyear)

}

File Name 

isleapyearf.cpp

Function Signature

bool isleapyear(int inyear);

Body mass index (BMI) is a number calculated from  a person’s weight and height.
According to the Centers for Disease Control and Prevention, the BMI is a fairly
reliable indicator of body fatness for most people. BMI does not measure body fat
directly, but research has shown that  BMI correlates to direct  measures  of  body  fat,  
such  as  underwater  weighing  and dual-energy X-ray absorptiometry. The formula 
for BMI is
    Weight/Height2

Where    weight is in kilograms    and height is in meters.

The name of the function should be named bmimetricf and the function should take two parameters which are the weight in kilograms and the height in meters to use to calculate the BMI..  Here is an example call to the function

int weight = 50;

float height = 1.58;

printf(“BMI is: %3.2f”,bmimetricf(weight, height)) ;

The output of the code above would be: BMI is: 20.03

File Name 

bmimetricf.cpp

Function Signature

float bmimetricf(int weight, float height);


Course
/
Week 11 - Algorithm Analysis
/
Readings and Resources

Readings and Resources

https://drive.google.com/file/d/1Cj0TEnMNGN4XpgXJcAa_5oM3-6rJUH-q/view

https://en.wikipedia.org/wiki/Analysis_of_algorithms


Course
/
Week 12 - Arrays
/
Arrays Lecture
Readings and Resources

https://drive.google.com/file/d/1e-1TgdsqrDAmX107-tKfhRaddB4agtfc/view?usp=sharing
https://www.w3schools.com/cpp/cpp_arrays.asp
https://www.w3schools.com/cpp/cpp_arrays_loop.asp
https://www.w3schools.com/cpp/cpp_arrays_omit.asp

Max In List Function

Lab due Oct 16, 2021 03:40 +06
Implement function maxinlst(lst), which returns the maximum value of the elements in the array.
For example, given an array lst: [-19, -3, 20, -1, 5, -25], the function
should return 20.


The name of the method should be maxinlst and the method should take two parameters.  The first parameter is the array of values to test.  The second parameter is the number of elements in the array. Here is an example call to the function

int lst[] = {-19, -3, 20, -1, 5, -25};

printf(“%i”,maxinlst(lst,6));

File Name 

maxinlst.cpp

Function Signature

int maxinlst(int lst[], int size);




Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including  the main method or any print statements. ONLY the maxinlst function is required. Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.

Max Absolute In List Function

Lab due Oct 16, 2021 03:40 +06
Implement function maxabsinlst(lst), which returns the maximum absolute
value of the elements in the array.
For example, given a array lst: [-19, -3, 20, -1, 0, -25], the function
should return 25.

The name of the method should be maxabsinlst and the method should take two parameters.  The first parameter is the array of values to test.  The second parameter is the number of elements in the array. Here is an example call to the function

int lst[] = {-19, -3, 20, -1, 5, -25};

printf(“%i”,maxabsinlst(lst,6));




Function Signature

int maxabsinlst(int lst[], int size);


File Name 

maxabsinlst.cpp

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including  the main method or any print statements. ONLY the maxabsinlst function is required. Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.



Average of List Function
Lab due Oct 16, 2021 03:40 +06
Implement function avgoflst(lst), which returns the average
value of the elements in the array.
For example, given a array lst: [19, 2, 20, 1, 0, 18], the function
should return 10.


The name of the method should be avgoflst and the method should take two parameters.  The first parameter is the array of values to test.  The second parameter is the number of elements in the array. Here is an example call to the function

int lst[] = {19, 2, 20, 1, 0, 18};

printf(“%3.0f”,avgoflst(lst,6));




Function Signature

float avgoflst(int lst[], int size);




File Name 

avgoflst.cpp

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including  the main method or any print statements. ONLY the avgoflst function is required. Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.



Strings in CPP:






Lecture Transcript

C++ Strings

C++ String Concatenation

C++ Numbers and Strings

C++ String Length

C++ Access Strings

C++ User Input Strings

C++ String Namespace

C Strings vs C++ Strings


https://drive.google.com/file/d/1i4AeifXK-hzeF3cnL8AMas2_x0xmBCaY/view

https://www.prismnet.com/~mcmahon/Notes/strings.html









BMI Metric With Status Category

ab due Oct 28, 2021 14:20 +06

Modify your earlier BMI Metric program to also display the CDC standard weight status categories:

The CDC standard weight status categories are:

BMI
	

Weight Status

Below 18.5
	

Underweight

18.5-24.9
	

Normal

25.0-29.9
	

Overweight

30.0 and above
	

Obese



For example,  an  execution could look  like  this:
Please enter weight in kilograms: 50
Please enter height in meters: 1.58
BMI is: 20.03, Status is Normal

File Name 

bmimetric2.cpp

Score

There are five tests each worth 2 points




Cash Register


Lab due Oct 28, 2021 14:20 +06

Write a program that computes how much a customer has to pay after purchasing
two items. 

The price is calculated according to the following rules:
• Buy one get one half off promotion: the lower price item is half price.
• If the customer is a club card member, additional 10% off.
• Tax is added.


Inputs to the program include:
• Two items’ prices
• Have club card or not (User enters ‘Y’ or ‘y’ for “yes”; ‘N’ or ‘n’ for “no”)
• Tax rate (User enters the percentage as a number; for example, they enter
8.25 if the tax rate is 8.25%)

Program displays:
• Base price - the price before the discounts and taxes
• Price after discounts - the price after the buy one get one half off promotion
and the member’s discount, if applicable
• Total price – the amount of money the customer has to pay (after tax)
printed with the precision of 2 decimal digits.

Hint: In order to print a number in a specific precision, you can use the round
function passing 2 arguments to it. To format to two decimal places you can use the printf function with the format of 2.2f.

For example, an execution could look like this:

Enter price of the first item: 10
Enter price of the second item: 20
Does customer have a club card? (Y/N): y
Enter tax rate, e.g. 5.5 for 5.5% tax: 8.25
Base price = 30.00
Price after discounts = 22.50
Total price = 24.36

File Name 

cashregister.cpp

Score

There are five tests each worth 2 points



Call Cost Calculator



Lab due Oct 28, 2021 14:20 +06

Write a program that computes the cost of a long-distance call. The cost of the call is
determined according to the following rate schedule:
• Any call started between 8:00 A.M. and 6:00 P.M., Monday through Friday, is
billed at a rate of $0.40 per minute.
• Any call starting before 8:00 A.M. or after 6:00 P.M., Monday through Friday, is
charged at a rate of $0.25 per minute.
• Any call started on a Saturday or Sunday is charged at a rate of $0.15 per
minute.
The input will consist of the day of the week, the time the call started, and the length
of the call in minutes.
The output will be the cost of the call.

Notes:
1. The time is to be input as 4 digit number, representing the time in 24-hour
notation, so the time 1:30 P.M. is input as 1330
2. The day of the week will be read as one of the following three character string:
‘Mon’, ‘Tue’, ‘Wed’, ‘Thr’, ‘Fri’, ‘Sat’ or ‘Sun’
3. The number of minutes will be input as a positive integer.

For example, an execution could look like this:


Enter the day the call started at: Fri
Enter the time the call started at (hhmm): 2350
Enter the duration of the call (in minutes): 22
This call will cost $5.50

File Name 

callcoster.cpp

Score

There are five tests each worth 2 points


String Splitter


Lab due Oct 28, 2021 14:20 +06

Read from the user a string containing 
odd number of characters. Your program should: 
a) Print the middle character. 
b) Print the string up to but not including the middle character (i.e., the first half 
of the string). 
c) Print the string from the middle character to the end (not including the 
middle character). 

Sample output: 
Enter an odd length string: Fortune favors the bold
Middle character: o
First half: Fortune fav
Second half: rs the bold

File Name 

stringsplitter.cpp

Score

There are five tests each worth 2 points




Character Type


Lab due Oct 28, 2021 14:20 +06

Write a program that  reads a character (string of  length  1)  from  the 
user, and classifies it to  one of the following: lower case letter, upper case letter, 
digit,  or non-alphanumeric character 

Sample  output (4 different executions):  
Enter a character: j
j is  a lower case  letter.
Enter a character: 7
7 is  a digit.
Enter a character: ^
^ is  a non-alphanumeric  character.
Enter a character: C
C is  an  upper case  letter.

File Name 

chartype.cpp

Score

There are five tests each worth 2 points


First Word Function


Lab due Oct 28, 2021 14:20 +06

Write a function that is given a phrase and returns the first word in that phrase.
For example, given ‘the quick brown fox’, your function should return ‘the’.

Here is an example call to the function

cout << firstword(“the quick brown fox”);

Function Signature

string firstword(string s);

File Name 

firstword.cpp

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including the main method or any print statements. ONLY the firstword function is required (leave in your includes and namespace directives). Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.




Remaining Words Function


Lab due Oct 28, 2021 14:20 +06

Write a function that is given a phrase and returns the phrase we get if we take  
out the first word from the input phrase.
For example, given ‘the quick brown fox’, your function should return ‘quick brown fox’

Here is an example call to the function

Cout << remainingwords(“the quick brown fox”);

Function Signature

string remainingwords(string s);

File Name 

remainingwords.cpp

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including  the main method or any print statements. ONLY the remainingwords function is required(leave in your includes and namespace directives). Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.

Operator Restrictions

. Some operators cannot be overloaded

. sizeof
?:
. Some can only be overloaded as a member
. = (the assignment operator)

. [] (the array-index of operator
. Some, almost, cannot be overloaded as a member
< <
> >

Choosing Member vs. Non-Member
. Remember that members have access to
private
. A function defined as a "friend" in the class
is NOT a member, but will have access to
private

. Otherwise, there is only one difference
. a+b will work in either case
. a+5 (object + constant) will work if there is a
constructor which can take 5 and construct an

object to add to a
. 5+a (constant + object) will only work if the
above constructor exists AND operator+ is a
non-member!


What To Return?
. The value returned depends on what the
operator should do
. The return data type depends on what is

being returned
. If the item being returned was created inside
the function, return MUST be by value

. If the item was passed in as a parameter, or
you are returning the "this" pointer, you can
return by reference
. Returning by reference is preferred


An Odd Case
. Because C++ has both a pre- and post-
increment operator, we need a special case
to differentiate

. The pre increment operator will change the
value and then return a reference to the
existing object
Date& operator++ ( );
. The post-increment operator will copy the

object, then change the value and return the
copy. Date operator++(int);
. Because we need to differentiate, the post-
increment is passed an int.
. The int passed has no bearing on the operator,
its just a way to differentiate


Classes that contain dynamic memory
. All classes have an assignment operator and
constructor which can copy an existing object,
this is a left-over of C's structs and is useful

. Unfortunately, when pointers are involved, the
built-in operators copy the pointers and not
what the pointers are pointing to
. This is known as a shallow copy and would be
problematic if left alone


Three problem, Big 3 solution
. Copy operations need to copy the data, not the pointers
. Since we are creating memory in the constructor, we
need to destroy that memory when the object falls out
of scope

. The Big 3 are three functions that, if you need any of
them, you need them all
. Destructor - Called automatically when the object falls out of
scope
. Copy Constructor - Constructs an object based on an existing one

. Assignment Operator - Copies one object to another (deep copy)
. Be careful of avoiding x=x (self-assignment use:
"if(this==&rhs)" to avoid)

Three problem, Big 3 solution
class Thing{
int* value;
public:
Thing (int newVal = 0) :value (new int (newVal)) ()
~Thing () { delete value; ) //destructor
Thing (const Thing& rhs) (value = new int (*rhs. value) ; )
Thing& operator=(const Things rhs) { *value = *phs. value; )
//copy constructor
// Assignment op
};

Inheritance
Vehicle Car
Object Circle
Student Person
During inheritance, the existing class, called a
base class is enlarged to form a derived class
All items (functions and data) which exist in the
base class will be in the derived class autometically.
THE derived class can create new versions of
existing functions, this is called overriding
This does not change private access, the derived
class cannot access private!

Pets and Cats
class Pet { / / base class
string name;

int petID;
public:
Pet (int newID = 0) (petID = newID; }
string getName () const {return name; }
void setName (string newName) {name = newName; }
void speak () const { }
};

class Cat :public Pet {//Cat IS-A Pet // Derived Class
double whiskerLength;

public:
Cat () : Pet (10000) {} / /explicit call to BASE
void speak () const {cout << "MEOW!" << endl;
void setLength (double newLength) ;
double getLength () const {return whisterLength; }
void setName (string newName) ;
Cat& operator=(const Pet&) ;
};

What If We Need To Override?
. To override, you just create a function in the
derived with the same name and parameters as
in the base
. If you need to call the base version of the
function, use the scop-resolution operator "::"

void Cat : : setName (string newName) {
whiskerLength = 0;
Pet : : setName (newName) ;
}

What if derived SHOULD access base's stuff?
. C++ adds a protection mechanism to allow for
a condition where a derived class should
access a base member's item

Items listed as "protected" in base can be
accessed from derived
This should be used sparingly

Polymorphism
Polymorphism in C++ allows us to copy data from a derived class into a
base class, but only the base items will copy over. (slicing)
Overloading the assignment operator can allow us to copy from a base

class into a derived object. (overloading)
Since every derived object contains everything in base, a base pointer
can point to a derived object. (polymorphism)
( there is no guarantee that base contains everything in derived so a
derived pointer can NEVER point to a base object)

int main( ) {
Pet p;
Pet* pptr;
cat c;
Cat* cptr;

p = c; // Always allowed
c = p; / /Allowed if operator=(const Pet&) is overloaded;
pptr = &; // Always allowed, polymorphism
cptr = &p; / /NEVER ALLOWED!
}

Virtual Functions
. If a base pointer is used to point to a derived object, by
default, the functions called will be the BASE versions of
the functions.
. This can be catastrophic if the derived function does

something different than the base
The solution is to mark the base function as "virtual"
. This employs late (aka dynamic) binding
. The version of the function called depends on the type
of object, not the type of pointer

Pure virtual
If the base class should contain a function, but doesn't know what the
function should actually do, the function can be marked as pure virtual "=0"
class Pet {//base class (abstract because of speak)

string name;
int petID;
public:
Pet (int newID = 0) (petID = newID; )
string getName () const {return name; )
virtual void setName (string newName) {name=newName; )
virtual void speak () const =0; //Pure virtual function
};

class Cat :public Pet {//Cat IS A Pet / / Derived class
double whiskerLength;
public:

Cat () : Pet (10000) {) / /explicit call to BASE constructor
void speak () const (cout<< "MEOW!" <<endl; )
void setLength (double newLength) ;
double getLength () const (return whiskerLength; }
void setName (string newName) ;
Cat& operator=(const Pet&) ;
};


Abstract Class cannot be created from a class having a pure virtual function.??????


The same function call results in different output
class Dog :public Pet(
double earSize;
public:

Dog () : Pat: (20000) ()
void speak () const ) cout << "WOOF!" << endl; )
void setSize (double newSize) (earSoze = newSize; ]
double getSize () const{ return earSize; )
};
int main () (
Pet.* pArray = new Pet * [3] ;
pArray (0] = new Cat () ;
pArray [1] = new Dog () :
pArray [2] = now Cat () ;
for (int i=0; 1<3; it+)
pArray [i]->speak () ; //MEOW, Woof, MEOW
}

What we discussed
. Definition of object and class
. The concept of encapsulation

. The creation of a class
. Enforcing protections and access
. Accessors/Mutators and const
. How to guarantee proper creation
. Using operators on classes

. Classes that contain dynamic memory
. Inheritance
. Polymorphism / Dynamic binding


W3 School Links :- 

C++ Object Oriented Programming

C++ Classes and Objects

C++ Class Methods

C++ Constructors

C++ Access Specifiers

C++ Encapsulation

C++ Inheritance

C++ Multilevel Inheritance

C++ Multiple Inheritance

C++ Inheritance Access

C++ Polymorphism


ShowTicket Class
Labs due Nov 21, 2021 11:24 +06
Description

A theatre sells seats for shows and needs a system to keep track of the seats they have sold tickets for. Define a class for a type called ShowTicket.

The class should contain fields for the row, seat number, and whether the ticket has been sold or not. Define a constructor which accepts as arguments the row and seat number and sets the sold status to false in the

constructor initialization section. 

Include the following member functions:

A function to check if the ticket has been sold with this signature: bool is_sold();
A function to update the ticket status to sold with this signature:  void sell_seat();
A function to print the row, seat number, and sold status delimited by a space with this signature: string print_ticket();
An example use of your class follows:

int main () {
  ShowTicket myticket1(“AA”,”101”);
  ShowTicket myticket2(“AA”,”102”);
  if(!myticket1.is_sold())
    myticket1.sell_seat ();
  cout << myticket1.print_ticket() << endl;
  cout << myticket2.print_ticket() << endl;
  return 0;
}

The output from this sample would be:

AA 101 sold
AA 102 available

File Name
showticket.h

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including the main method or any print statements. ONLY the ShowTicket class is required. Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.

ShowTickets Class
Labs due Nov 21, 2021 11:24 +06
Description

A theatre sells seats for shows and needs a system to keep track of the seats they have sold tickets for. Define a class for a type called ShowTickets.

The class should contain a collection field for the rows, seat numbers, and whether the tickets have been sold or not. Your class only needs to support 10 sold tickets. Assume a ticket you have not referenced before has a sold status of false. 

Include the following member functions:

A function to check if the ticket has been sold with this signature: bool is_sold(string row, string seat);
A function to update the ticket status to sold with this signature:  void sell_seat(string row, string seat);
A function to print the row, seat number, and sold status delimited by a space with this signature: string print_ticket(string row, string seat);
An example use of your class follows:

int main () {
  ShowTickets myticket;
  if(!myticket.is_sold(“AA”,”101”))
    myticket.sell_seat (“AA”,”101”);
  cout << myticket.print_ticket(“AA”,”101”) << endl;
  cout << myticket.print_ticket(“AA”,”102”) << endl;
  return 0;
}

The output from this sample would be:

AA 101 sold

AA 102 available

File Name 

showtickets.h

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including the main method or any print statements. ONLY the ShowTickets class is required. Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.


SportTicket Class
Labs due Nov 21, 2021 11:24 +06
Description

A football club needs a system to keep track of the seats they have sold tickets for. Define a class for a type called SportTicket that inherits from the ShowTicket class you defined earlier. You should include the showticket.h file in your code but not upload the file.

The class should add a new boolean field to store if beer has been purchased at that seat. Define a constructor which accepts as arguments the row and seat number and sets the sold status and beer sold fields to false in the constructor initialization section. 

The showticket class has the following protected members:

string row;
string seat;


Include the following new member functions:

A function to check if the ticket has been sold with this signature:bool beer_sold();
A function to update the beer sold status to sold with this signature:  void sell_beer();
override the print_ticket method to add if beer has been sold or not.
An example use of your class follows:

int main () {
  SportTicket myticket1(“AA”,”101”);
  SportTicket myticket2(“AA”,”102”);
  myticket1.sell_seat();
  myticket2.sell_seat();
  myticket2.sell_beer();
  cout << myticket1.print_ticket() << endl;
  cout << myticket2.print_ticket() << endl;
  return 0;
}

The output from this sample would be:

AA 101 sold nobeer
AA 102 sold beer

File Name 

sportticket.h

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including the main method or any print statements. ONLY the SportTicket class is required (The grader already has the ShowTicket class). Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.



TicketSales Class

Labs due Nov 21, 2021 11:24 +06
Description

You have been so successful in your previous object oriented programming you decide to develop a computer software system to compete with Ticketmaster

You then add a new class called TicketSales. This new class can print either a ShowTicket or a SportsTicket. You should include the header file sportticket.h in your header

Include the following new member functions

A function to print either a ShowTicket or a SportTicket with this signature:string print_ticket(ShowTicket *myticket);

An example use of your class follows:

int main () {
  TicketSales ts;
  ShowTicket myticket1(“AA”,”101”);
  SportTicket myticket2(“AA”,”102”);
  myticket1.sell_seat();
  myticket2.sell_seat();
  myticket2.sell_beer();
  cout << ts.print_ticket(&myticket1);
  cout << ts.print_ticket(&myticket2);
  return 0;
}

The output from this sample would be:

AA 101 sold 

AA 102 sold beer

File Name 

ticketsales.h

Score

There are three tests each worth 2 points

Note: You do not need to submit any other code including the main method or any print statements. ONLY the class TicketSales is required (The grader already has the ShowTicket and SportTicket classes). Otherwise, the autograder will fail and be unable to grade your code. (I.e., do not include the above example in your code.) The above example should be used to test your code but deleted or commented out upon submission.








